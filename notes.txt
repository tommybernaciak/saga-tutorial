middleware

watcher saga, worker saga

return exits saga

put will let us dispatch actions

blocking and non blocking effects
non blocking - handle effects in any sequence (takeEvery)
blocking - sequence is important (take)
fork - run saga in parallel

put vs call // call runs a function, whenever saga comes across a promise, will pause itself until a promise is completed, put dispatches an action
yield vs yield* // yield zwraca wartość vs. zatrzymanie akcji i oddelegowanie do innego generatora
